AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda Function with Secrets Manager Integration

Parameters:
  SecretName:
    Type: String
    Default: "MyDBCredentials"
  S3BucketName:
    Type: String
    Default: "artifacbucket"

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: org.example.SecretLambdaHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: SecretsLambda
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: secrets-lambda.jar
      Runtime: java11
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          SECRET_NAME: !Ref SecretName
#          PARAMETERS_SECRETS_EXTENSION_CACHE_ENABLED: false
#      VpcConfig:
#        SecurityGroupIds:
#          - sg-07d9b8d5752a9c313
#        SubnetIds:
#          - subnet-0adbcc89f0df429eb
#          - subnet-0b6780dfaef1fe553
#          - subnet-04bade418754d46ef
#          - subnet-00f748327a9dbca01
#          - subnet-0757972f9f1ace03e
#          - subnet-0a7f0a4e3f8f88d3b
      Layers:
        - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:4


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:*
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}-??????"
        - PolicyName: AllowToDeployInVPC
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
#                  - ec2:DescribeNetworkInterfaces
#                  - ec2:CreateNetworkInterface
#                  - ec2:DeleteNetworkInterface
#                  - ec2:DescribeInstances
#                  - ec2:AttachNetworkInterface
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
